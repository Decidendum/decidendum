@charset "UTF-8";
/*------------------------------------------------------------------------------
 * Main Styles
 *------------------------------------------------------------------------------
 * Use this file to compile globally used styles (E.g.: normalize, structure,
 * default tags styling, etc.).
 * 
 * Don't use this file as the only stylesheet generator. You should have as many
 * stylesheet aside this, so that on each page you will serve the user only the
 * ones needed.
 */
/*------------------------------------------------------------------------------
 * Core Requirements Loader
 *------------------------------------------------------------------------------
 *
 * Use this file to set all global requirements.
 * 
 * This file, if used correctly, should generate no output
 * when import to other files. This means we can safely
 * import it everywere without resulting in repeated CSS
 * over differente files. For this to work, you have to
 * remember that only non-outputing vendors should be
 * imported here.
 */
/*------------------------------------------------------------------------------
 * Core Vendors
 *------------------------------------------------------------------------------
 * Use this file to import globally used vendor.
 * 
 * Note that this partial is beeing loaded in the base partial, what means that
 * you should import here only non-emitting vendors, so that the import of the
 * base won't generate unecessary CSS. For example, most of the Compass' util
 * won't emit styles when imported. Some like the "compass/reset" will. The
 * second, then, shouldn't be import here, but in a outputting CSS like the ones
 * in the "css" folder; and probably in only one of them.
 */
/*------------------------------------------------------------------------------
 * Core Definitions
 *------------------------------------------------------------------------------
 * Use this file to import globally used definitions.
 * 
 * This will usually mean all the files under this directory, as this will do 
 * no harm and will indeed help to keep everything accessible from all kinds of 
 * partials.
 */
/*------------------------------------------------------------------------------
 * Color Definitions
 *------------------------------------------------------------------------------
 * Use this file to set color variables & functions.
 * 
 * Before starting to define your color variables, I'll advice you: colors (
 * maybe more then other kind of variables in Sass) can get really trick and 
 * messed up after some time, mostly because then tend to change a lot during 
 * development. To help you make better decisions, I would advice you to read 
 * the followng articles:
 * 
 * - http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/quick-tip-name-your-sass-variables-modularly/
 * - http://sachagreif.com/sass-color-variables/
 */
/*------------------------------------------------------------------------------
 * Typography Definitions
 *------------------------------------------------------------------------------
 * Use this file to set typography variables & functions.
 * 
 * Althought this might seem like the place for it, this is not the place for
 * defining custom font sources. To keep this file a non-emitting partial, you
 * you should only set here the font-related variables, such as font sizes,
 * font weights, font families, etc.
 */
/*------------------------------------------------------------------------------
 * Sprite Definitions
 *------------------------------------------------------------------------------
 * Use this file to set sprites and related variables or functions.
 * 
 * To fully understand how this file works, you should be familiar with the 
 * concepts of compass sprite generation and magic imports. To read more on 
 * that, please refeer to http://compass-style.org/help/tutorials/spriting/ and 
 * the sections listed above in that page. Also, it will be good to have an
 * understading of Sass placeholders. For that, there is a great article too:
 * http://blog.teamtreehouse.com/extending-placeholder-selectors-with-sass.
 */
/*----------------------------------------------------------
 * By defaut, using compass' magic imports for sprites will
 * generate class selectors, that can then be extend in
 * order to apply the background image to another selector.
 * The problem here is that each time you import this file
 * to a compiling stylesheet, all the sprite selectors will
 * be output without you probably using them. To solve this
 * problem there should be a way to import sprite selectors
 * as placeholders, so that no style selector will be output
 * unless you acctually extend them.
 * 
 * There is an issue on Compass detailing this problem:
 * https://github.com/chriseppstein/compass/issues/1005
 * 
 * The solution written is this document was proposed to the
 * issue above, as well as better documented in this post at
 * CoderWall: https://coderwall.com/p/si0rlq.
 * 
 * Following below are the steps needed to solve this issue.
 * Keep in mind that you don't necessarilly have to
 * understand this in order to make use of compass sprites,
 * as long as you keep "imports" and "includes" in the
 * places suggested below.
 * 
 *----------------------------------------------------------
 * 1) - Define base selectors:
 *----------------------------------------------------------
 * Defining placeholder bases selectors for each sprite in
 * use will make sure the main sprite selectors, where
 * compass sets the background-image attributes, won't be
 * output. The exemple shown below is for a "icons" sprite.
 */
/*----------------------------------------------------------
 * 2) - Import and compile images:
 *----------------------------------------------------------
 * This is the step that acctually tells Compass to compile
 * the images under a directory into a sprite. Usually,
 * this would generate and output a class selector like
 * ".icons-sprite", in our exemple.
 */
/*----------------------------------------------------------
 * 3) - Include custom sprite mixin
 *----------------------------------------------------------
 * Each import as the one made above, will load a "magic"
 * Sass partial, containing all the sprite selectors AND
 * some mixins for common sprite usage. These mixins have to
 * be overwritten in order for them to use placeholder based
 * classes for each image selector. We only keep this mixins
 * in another file and on another partial category directory
 * to keep things in order.
 */
/*
 *------------------------------------------------------------------------------
 * Custom Sprite Mixins
 *------------------------------------------------------------------------------
 */
/*
 *----------------------------------------------------------
 * Compass "sprites" mixin overwrite
 *----------------------------------------------------------
 * This mixin is an overwritted version of one found at the
 * Compass' base sprites mixin partial. It is been used as
 * part of the solution to transform the sprite selectors
 * into placeholder selectors, so that the sprites partial
 * can be a non-emitting one.
 * 
 * Read the sass/def/_sprites.sass to fully understand this
 * issue.
 */
/*----------------------------------------------------------
 * 4) - Include sprites
 *----------------------------------------------------------
 * There are many ways to include sprites. One of them is to
 * use the dynamic mixin "+all-[SPRITE-NAME]-sprite", created
 * for each imported sprite, to include selectors for all
 * the images contained in a sprite. Usually these selectors
 * would be normal classes; due to the mixin imported above,
 * they are now placeholders. As they are now placeholder,
 * there will be no harm on including them all here, so that
 * to use the sprites the only thing I have to do is to
 * extend these selectors, with no need to include any other
 * mixin on my own selectors.
 */
/*------------------------------------------------------------------------------
 * Core Mixins
 *------------------------------------------------------------------------------
 * Use this file to import globally used mixins.
 */
/*------------------------------------------------------------------------------
 * Core Modules
 *------------------------------------------------------------------------------
 * Use this file to import globally used modules.
 */
/*------------------------------------------------------------------------------
 * Layout
 *------------------------------------------------------------------------------
 */
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\000037}}
body {
  font-family: "Open Sans", sans-serif;
  box-shadow: inset 0 0 300px rgba(0, 0, 0, 0.3);
}

@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000311}}
#header {
  display: -webkit-box;
  -webkit-box-pack: center;
  -webkit-box-align: center;
  height: 100vh;
  width: 100%;
  margin: 0;
  border: none;
  background: url('../images/hands-voting-sm-blueish.png?1393121484');
  background-size: cover;
  background-position-y: bottom;
  color: white;
  text-align: center;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000325}}
#header > .container {
  margin-top: -12%;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000328}}
#header .btn-primary {
  border-color: rgba(255, 255, 255, 0.7);
  background: transparent;
  color: rgba(255, 255, 255, 0.9);
  transition: all 200ms;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000333}}
#header .btn-primary:hover {
  border-color: white;
  background-color: rgba(255, 255, 255, 0.03);
  color: white;
}

@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000338}}
#subscribe {
  margin-top: 30px;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000341}}
#subscribe .form-group {
  margin-right: 5px;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000343}}
#subscribe .form-group input {
  padding: 21px 12px;
}

@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000346}}
#how-it-works {
  display: none;
  height: 100vh;
  padding: 120px 0;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000351}}
#how-it-works > .container {
  height: 100%;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000354}}
#how-it-works #slides {
  height: 100%;
  width: 100%;
}

@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000358}}
#subscribed {
  display: none;
  margin-top: 30px;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000361}}
#subscribed p {
  margin: 0;
}
@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000363}}
#subscribed a {
  color: white;
  font-weight: 500;
}

@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000367}}
#changing {
  position: relative;
}

@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000370}}
#dump {
  color: transparent;
}

@media -sass-debug-info{filename{font-family:file\:\/\/\/home\/lucas\/www\/agora\/git\/landing\/sass\/partials\/parts\/_layout\.sass}line{font-family:\0000373}}
#attribute {
  position: absolute;
  left: 0;
}

/*------------------------------------------------------------------------------
 * Shame
 *------------------------------------------------------------------------------
 * File used for quick fixes / hacks
 * 
 * 1. If it’s a hack, it goes in shame.css.
 * 
 * 2. Document all hacks fully:
 *    a. What part of the codebase does it relate to?
 *    b. Why was this needed?
 *    c. How does this fix it?
 *    d. How might you fix it properly, given more time?
 * 
 * 3. Do not blame the developer; if they explained why they had to do it then
 *    their reasons are probably (hopefully) valid.
 * 
 * 4. Try and clean _shame.sass up when you have some down time or even better,
 *    get a tech-debt story in which you can dedicate actual sprint time to it.
 * 
 * See http://csswizardry.com/2013/04/shame-css for more info.
 */
